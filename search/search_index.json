{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>yapping when bored, dont' mind the shit here</p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/","title":"Linux How-TOs \u2753 | A must know list of commands in Linux shells","text":"<p>Hello Everyone \ud83d\udc4b.</p> <p>Here's a list of useful tools and commands that are required often for using Linux as a daily driver or even only for development.</p> <p>This article will cover commands from bash, zsh, and fish since they are mostly compatible.</p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#topics-covered-in-this-article","title":"Topics covered in this article","text":"<p>Concepts: <code>Environment variables</code>, <code>Aliasing</code>, <code>Path</code> Built in commands: <code>set(fish)</code>, <code>cd</code>, <code>pwd</code>, <code>ls</code>, <code>mkdir</code>, <code>touch</code>, <code>cat</code>, <code>echo</code>, <code>rm</code>, <code>cp</code>, <code>mv</code>, <code>grep</code>, <code>wget</code>, <code>tar</code> Installable commands: <code>nano</code>, <code>mousepad</code></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#basics","title":"Basics","text":"<p>Before starting with commands here are some core concepts you should be aware of: * <code>~</code> in a path represents the home directory (eg: <code>/home/username/</code> ) * <code>/</code> represents the root directory  * Values starting with a <code>$</code> denote an environment variable. For example, <code>$HOME</code> returns the path to your home directory. If the environment variable is not found an empty string is returned.</p> <pre><code>sarthak@sarthak ~&gt; echo $HOME\n/home/sarthak\nsarthak@sarthak ~&gt; echo $THIS_ENV_DONT_EXIST\n\nsarthak@sarthak ~&gt;  \n</code></pre> <ul> <li>There might be some differences between syntax patterns in different shells, in that case, alternatives will be used.</li> </ul> <p>These are basic commands you should know to use the terminal efficiently.</p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are used to store values for a process into the system, there are several Environment variables like <code>PATH</code>, <code>PWD</code>, <code>USER</code> etc set up by the processes on the system. Here are some operations you can perform on them. <pre><code># reading a env variable\necho $HOME # prefixing the name with $\nENV_NAME=\"VALUE\" # setting value for a session\n# Example\nsarthak@sarthak:~$ VAR2=\"sarthak in bash\" # using bash\nsarthak@sarthak:~$ echo $VAR1 $VAR2\nsarthak in bash\nsarthak@sarthak ~&gt; set VAR1 \"sarthak in fish\" # using fish\nsarthak@sarthak ~&gt; echo $VAR1\nsarthak in fish\n</code></pre></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#creating-aliases","title":"Creating aliases","text":"<p>You can create aliases for long commands using <code>alias</code> command. These are useful when you need to repeat same task multiple times. <pre><code>alias [ALIAS] [COMMAND]\n</code></pre> Example</p> <p></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#the-path-variable","title":"The PATH variable","text":"<p>The path variable stores directory addresses where executable files are stored. These are stored in a single string seperated by a colons. You can access the path using the <code>PATH</code> variable in the shell. Adding a path temporarily To add a path temporarily you can use the <code>export</code> command in the active shell  <pre><code>export PATH=$PATH:/path/to/directory # for bash and zsh\nfish_add_path /path/to/directory # for fish\n</code></pre> This will add the PATH to the path variable for current shell session. Adding a path permanently You need to edit your RC file which should be named after your shell ( <code>.bashrc</code>, <code>.zshrc</code>) to execute the commands from above. For fish shell you need to add the set command in <code>~/.config/fish/config.fish</code></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#navigation","title":"Navigation","text":"<ul> <li>cd: The <code>cd</code> command is used to move from one directory to another. The syntax for the command is  <pre><code>cd [DIRECTORY] # where directory is the path of the directory to navigate to \ncd .. # to navigate to the parent directory of your current\n# you can also navigate to other dir in the parent dir\ncd ../other_directory_in_parent_directory \ncd ~ # for the home directory\ncd / # for the root directory\n\n# exclusive to fish, you can type in the directory path directly\ndirectory/\n</code></pre></li> <li>pwd:  Print Working Directory prints the path to the current working directory. <pre><code># example\nsarthak@sarthak ~/p/codeforces (main)&gt; pwd\n/home/sarthak/projects/codeforces\n</code></pre></li> <li>ls: This is used to list the contents of a directory. Command syntax: <pre><code>ls [DIR_NAME=pwd] # current directory is listed by default\nls -R # shows files and folders inside the dir recusively\n# you don't want to use the -R tag most of the times.\n</code></pre></li> </ul>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#working-with-directories-and-files","title":"Working with directories and files","text":"<ul> <li>mkdir: The <code>mkdir</code> command is used to <code>m</code>a<code>k</code>e <code>dir</code>ectories in the current working directory. Command syntax:  <pre><code>mkdir [DIRECTORY_NAME] # creates a directory with the name provided\n# if the directory is a subdirectory and the parent dir does not exist\nmkdir -p [DIRECTORY_PATH] \n# example\nmkdir hello/world # will error since dir hello does not exist\nmkdir -p hello/world # will create hello dir with world dir inside it\n</code></pre></li> <li>touch: This command is actually meant to modify edit and create time of files, but can also be used to create them. Command syntax: <pre><code>touch hello.txt # creates a new file called hello.txt\n</code></pre></li> <li>cat: This command is used to con<code>cat</code>inate the contents of file(s) and display them. Command Syntax: <pre><code>cat [FILE(s)]\n# example\ncat file1.txt file2.txt\n</code></pre></li> <li>echo: The echo command is mainly used to display text in the stdout but can also be used to write in a file. Command syntax:  <pre><code>echo \"text to display in shell\"\necho \"text to display in file\" &gt; filename\n# Example\nsarthak@sarthak ~&gt; echo \"import hello\" &gt; main.py\nsarthak@sarthak ~&gt; cat main.py\nimport hello\n</code></pre></li> <li> <p>rm: The <code>rm</code> command is used to <code>r</code>e<code>m</code>ove files or dirs specified in the argument. Some useful flags for this command are:</p> <ul> <li><code>r</code>: recursively remove items from the directory</li> <li><code>f</code>: ignore files that do not exist without any prompts</li> </ul> <p>Command Syntax:  <pre><code>rm &lt;flags&gt; [TARGET] \n# Example\nrm hello.txt # will remove the hello.txt file \nrm -rf src/ \n# will remove all the files and dirs inside the src dir and delete it\n</code></pre></p> </li> <li> <p>cp: This command is used to create a <code>c</code>o<code>p</code>y of a file. Command syntax:  <pre><code>cp [SOURCE_FILE] [TARGET_FILE] # target file created if doesn't exist\n# Example\nsarthak@sarthak ~&gt; cat hello.py\nimport hello\nsarthak@sarthak ~&gt; cp hello.py test.py\nsarthak@sarthak ~&gt; cat test.py\nimport hello\n</code></pre></p> </li> <li>mv: The <code>m</code>o<code>v</code>e command is used to move the file from one location to another.  It can also be used to rename the file. <pre><code>mv [FILE] [TARGET] # target can be a directory or a file name\n# Example\nsarthak@sarthak ~&gt; mkdir test_dir\n# moving to a new directory\nsarthak@sarthak ~&gt; mv hello.py test_dir/\nsarthak@sarthak ~&gt; cat test_dir/hello.py\nimport hello\n# renaming the file\nsarthak@sarthak ~&gt; mv test_dir/hello.py test_dir/renamed_file.py\nsarthak@sarthak ~&gt; cat test_dir/renamed_file.py\nimport hello\n</code></pre></li> <li> <p>grep: The grep command is used to find for text in a file. Command syntax  <pre><code>grep &lt;tags&gt; [STR_TO_SEARCH_FOR] [FILENAME]\n# Example\nsarthak@sarthak ~ [1]&gt; grep \"py\" space/src/lib.rs\nuse pyo3::prelude::*;\n#[pyfunction]\n#[pymodule(name=\"space\")]\n    m.add_function(wrap_pyfunction!(test_function, m)?)?;\n# For better output use the --color and -n tags\n# it will highlight the output and add line numbers to the matches\n</code></pre> </p> </li> <li> <p>wget: This utility is used to download files to the local system. Command Syntax: <pre><code>wget &lt;-c&gt; [URL] # the c tag is used to establish a continous download\n# Example\nsarthak@sarthak ~&gt; wget -c https://bootstrap.pypa.io/get-pip.py\n--2024-08-24 08:01:29--  https://bootstrap.pypa.io/get-pip.py\nResolving bootstrap.pypa.io (bootstrap.pypa.io)... 151.101.156.175, 2a04:4e42:25::175\nConnecting to bootstrap.pypa.io (bootstrap.pypa.io)|151.101.156.175|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2266755 (2.2M) [text/x-python]\nSaving to: \u2018get-pip.py\u2019\n\nget-pip.py                    100%[=================================================&gt;]   2.16M  10.3MB/s    in 0.2s\n\n2024-08-24 08:01:30 (10.3 MB/s) - \u2018get-pip.py\u2019 saved [2266755/2266755]\n</code></pre></p> </li> </ul>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#text-editing","title":"Text Editing","text":"<p>Text editing tools like <code>nano</code> and <code>vim</code> come pre installed on most linux distributions. You can use <code>nano</code> for basic text editing inside the terminal.  Usage: <code>nano [FILENAME]</code> Alternatively you can use <code>mousepad</code> for GUI based editing. Usage: <code>mousepad [FILENAME]</code></p> <p></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#working-with-archives","title":"Working with Archives","text":"<p>The <code>tar</code> command is used to work with <code>tar.gz</code> format which is mostly used in linux OS(s). Usage: <code>tar [options] [archive-file]</code> You can use this command to unarchive files. <pre><code>tar -cvzf [archive].tar.gz [FOLDER NAME]\n</code></pre></p> <p>These are the commands I use for development using Ubuntu(WSL) and Arch(Bare Metal) as a daily driver. Fell free to comment for improvements and other relevant useful information that can be added \ud83d\ude04.</p>"},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/linux/","title":"linux","text":""},{"location":"category/shell/","title":"shell","text":""},{"location":"category/cli/","title":"cli","text":""}]}