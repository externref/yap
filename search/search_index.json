{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>yapping when bored, dont' mind the shit here</p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/","title":"Installing Arch for dummies (me)","text":"<p>Arch Linux is a lightweight and flexible Linux distribution that provides full customisation options with minimal pre-install configuration options and less bloatware. The installation and setup process, however, is a bit complicated and different than most daily dirving Linux Distros like Ubuntu, Fedora, etc...</p> <p>Even though there are custom ISOs with GUI installers available, its safer to use the officially released ISOs version. This blog is a walkthrough for steps involved in installation of the OS with the <code>i3-wm</code> desktop environment. All these instructions can be found on The Installation guide with some difference in commands used.</p> <p>Note</p> <p>The screenshots are from a VirtualBox setup for a clearer demonstration of the process. The installation process is same.</p> <p>My dotfiles: @externref/dotfiles</p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#installating-the-os","title":"Installating the OS","text":""},{"location":"2024/10/29/installing-arch-for-dummies-me/#creating-an-installation-medium","title":"Creating an Installation Medium","text":"<p>To install arch you need to load it into an installation medium like a USB Drive, Optical Disc or any memory device.</p> <ul> <li>First, download the ISO file from one of the sources listed on the download page. You need the file with <code>.iso</code> extension from the respective sources.</li> <li>Setup your utility for creating the bootable drive, we are going to use Rufus which is a lightweight tool for flashing USBs. (You might want to use the Balena Etcher utility on a linux distribution.)</li> <li>Download and launch the rufus executable and select the USB device and the ISO image that you downloaded. Click on Start and proceed further with the recommended options.</li> </ul> Screenshot <p></p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#booting-and-pre-install-configs","title":"Booting and Pre Install configs.","text":"<p>Restart the System to open the BIOS menu and select the device that was flashed with the Arch ISO.</p> <p>Warning</p> <p>Make sure to disable <code>Secure Boot</code> option from your system settings during the installation process, you can re-enable it after installing.</p> <p>On booting, you should enter into a Grub screen with Arch Linux Installation medium and other options.</p> <p></p> <p>Upon booting you should see the arch installation terminal with some instructions.</p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#connect-to-internet","title":"Connect to internet","text":"<p>Before anything, you should be connected to the internet.  Run the <code>iwctl</code> utility to open an interface to connected to the desired network.</p> <ul> <li>Use the <code>device list</code> to list all the available devices, if you're using a WIFI network it should be a wlan network.</li> <li>Scan the station using <code>station [wlan_name] scan</code>.</li> <li>Connect to the desired network using <code>station [wlan_name] connect [device_name]</code>.</li> </ul>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#verify-internet-connection","title":"Verify internet connection","text":"<p>Use the <code>ping</code> command to check internet connection. It should produce an output like this </p> <p></p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#paritioning-and-formatting-disks","title":"Paritioning and Formatting Disks","text":"<p>You need 2 disk partitions in order to install Arch Linux.</p> disk recommended memory mount point fs boot 1GiB <code>/mnt/boot</code> FAT32 root ~30-40GiB <code>/mnt</code> EXT4"},{"location":"2024/10/29/installing-arch-for-dummies-me/#disk-partitions","title":"Disk partitions","text":"<p>Use the <code>lsblk</code> command to check the current memory condition.</p> <p></p> <p>Remember the address of the disk where the system is to be installed.</p> <p>Use the <code>cfdisk</code> command to create partition. You need an unallocated space of around 40 GiB minimum to install daily driving arch.</p> <p>Use <code>cfdisk /dev/&lt;disk_name&gt;</code> to open the cfdisk interface.</p> <p></p> <p>You can see the empty patition in the screenshot, we'll be using this to create our arch patitions.</p> <ul> <li>Create a 1GiB partition and give it type EFI System.</li> <li>Allocate the rest to the linux filesystem partition.</li> </ul> Screenshots <p> </p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#creating-filesystems","title":"Creating filesystems","text":"<p>Now, format the partitions into the required filesystem types. <pre><code>mkfs.fat -F 32 /dev/&lt;boot_partition&gt; \nmkfs.ext4 /dev/&lt;root_patition&gt;\n</code></pre></p> <p>This command formats the disks into the required fs types.</p> <p></p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#mouting-the-filesystems","title":"Mouting the filesystems","text":"<p>Now, we mount the filsystems on the disk.</p> <pre><code>mount /dev/&lt;root_parition&gt; /mnt\nmount --mkdir /dev/&lt;boot_partition&gt; /mnt/boot\n</code></pre> <p></p> <p>This was all the manual configuration, in further steps, we'll be using the archinstall script for easier installation.</p>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#arch-install","title":"Arch Install","text":"<p>Run the <code>archinstall</code> command in the terminal. It will open an interface stating various install options with some pre-set ones.</p> <p></p> <ul> <li>Go to the <code>Disk Configuration</code> option, and use the pre configured mount option from create partitions option. Enter <code>/mnt</code> as the value and press enter. Confirm and exit.</li> <li>Select <code>Grub</code> as the bootloader.</li> <li>In the User settings create a new user with desired configurations.</li> <li>Profile configs [below]</li> <li>Select <code>Pipewire</code> or <code>Pulseaudio</code> for the audio server.</li> <li>Use <code>NetworkManager</code> for the network configs.</li> <li>Select your timezone by searching it throught <code>/</code>.</li> </ul>"},{"location":"2024/10/29/installing-arch-for-dummies-me/#profile","title":"Profile","text":"<p>We'll be using i3-wm for this installation, you can choose the desktop environment you want and continue with it.</p> <ul> <li>Go to <code>Profile</code> and select <code>Desktop</code>.</li> <li>Select <code>i3-wm</code> (using Tab) in the desktop environment options.</li> <li>Select <code>ly</code> as the login screen.</li> </ul> <p>Save and go back to main screen.</p> <p>This is what your configs should look like after setting up everything.</p> <p></p> <p>Select <code>Install</code> and press enter and watch the magic happen!.</p> <p>You should be greeted with this screen once you're done installing arch.</p> <p></p> <p>Enter in prompt if you have anything else to configure. </p> <p>Your Arch Linux installation is not completed and can be booted into.</p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/","title":"Linux How-TOs \u2753 | A must know list of commands in Linux shells","text":"<p>Hello Everyone \ud83d\udc4b.</p> <p>Here's a list of useful tools and commands that are required often for using Linux as a daily driver or even only for development.</p> <p>This article will cover commands from bash, zsh, and fish since they are mostly compatible.</p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#topics-covered-in-this-article","title":"Topics covered in this article","text":"<p>Concepts: <code>Environment variables</code>, <code>Aliasing</code>, <code>Path</code> Built in commands: <code>set(fish)</code>, <code>cd</code>, <code>pwd</code>, <code>ls</code>, <code>mkdir</code>, <code>touch</code>, <code>cat</code>, <code>echo</code>, <code>rm</code>, <code>cp</code>, <code>mv</code>, <code>grep</code>, <code>wget</code>, <code>tar</code> Installable commands: <code>nano</code>, <code>mousepad</code></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#basics","title":"Basics","text":"<p>Before starting with commands here are some core concepts you should be aware of: * <code>~</code> in a path represents the home directory (eg: <code>/home/username/</code> ) * <code>/</code> represents the root directory  * Values starting with a <code>$</code> denote an environment variable. For example, <code>$HOME</code> returns the path to your home directory. If the environment variable is not found an empty string is returned.</p> <pre><code>sarthak@sarthak ~&gt; echo $HOME\n/home/sarthak\nsarthak@sarthak ~&gt; echo $THIS_ENV_DONT_EXIST\n\nsarthak@sarthak ~&gt;  \n</code></pre> <ul> <li>There might be some differences between syntax patterns in different shells, in that case, alternatives will be used.</li> </ul> <p>These are basic commands you should know to use the terminal efficiently.</p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are used to store values for a process into the system, there are several Environment variables like <code>PATH</code>, <code>PWD</code>, <code>USER</code> etc set up by the processes on the system. Here are some operations you can perform on them. <pre><code># reading a env variable\necho $HOME # prefixing the name with $\nENV_NAME=\"VALUE\" # setting value for a session\n# Example\nsarthak@sarthak:~$ VAR2=\"sarthak in bash\" # using bash\nsarthak@sarthak:~$ echo $VAR1 $VAR2\nsarthak in bash\nsarthak@sarthak ~&gt; set VAR1 \"sarthak in fish\" # using fish\nsarthak@sarthak ~&gt; echo $VAR1\nsarthak in fish\n</code></pre></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#creating-aliases","title":"Creating aliases","text":"<p>You can create aliases for long commands using <code>alias</code> command. These are useful when you need to repeat same task multiple times. <pre><code>alias [ALIAS] [COMMAND]\n</code></pre> Example</p> <p></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#the-path-variable","title":"The PATH variable","text":"<p>The path variable stores directory addresses where executable files are stored. These are stored in a single string seperated by a colons. You can access the path using the <code>PATH</code> variable in the shell. Adding a path temporarily To add a path temporarily you can use the <code>export</code> command in the active shell  <pre><code>export PATH=$PATH:/path/to/directory # for bash and zsh\nfish_add_path /path/to/directory # for fish\n</code></pre> This will add the PATH to the path variable for current shell session. Adding a path permanently You need to edit your RC file which should be named after your shell ( <code>.bashrc</code>, <code>.zshrc</code>) to execute the commands from above. For fish shell you need to add the set command in <code>~/.config/fish/config.fish</code></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#navigation","title":"Navigation","text":"<ul> <li>cd: The <code>cd</code> command is used to move from one directory to another. The syntax for the command is  <pre><code>cd [DIRECTORY] # where directory is the path of the directory to navigate to \ncd .. # to navigate to the parent directory of your current\n# you can also navigate to other dir in the parent dir\ncd ../other_directory_in_parent_directory \ncd ~ # for the home directory\ncd / # for the root directory\n\n# exclusive to fish, you can type in the directory path directly\ndirectory/\n</code></pre></li> <li>pwd:  Print Working Directory prints the path to the current working directory. <pre><code># example\nsarthak@sarthak ~/p/codeforces (main)&gt; pwd\n/home/sarthak/projects/codeforces\n</code></pre></li> <li>ls: This is used to list the contents of a directory. Command syntax: <pre><code>ls [DIR_NAME=pwd] # current directory is listed by default\nls -R # shows files and folders inside the dir recusively\n# you don't want to use the -R tag most of the times.\n</code></pre></li> </ul>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#working-with-directories-and-files","title":"Working with directories and files","text":"<ul> <li>mkdir: The <code>mkdir</code> command is used to <code>m</code>a<code>k</code>e <code>dir</code>ectories in the current working directory. Command syntax:  <pre><code>mkdir [DIRECTORY_NAME] # creates a directory with the name provided\n# if the directory is a subdirectory and the parent dir does not exist\nmkdir -p [DIRECTORY_PATH] \n# example\nmkdir hello/world # will error since dir hello does not exist\nmkdir -p hello/world # will create hello dir with world dir inside it\n</code></pre></li> <li>touch: This command is actually meant to modify edit and create time of files, but can also be used to create them. Command syntax: <pre><code>touch hello.txt # creates a new file called hello.txt\n</code></pre></li> <li>cat: This command is used to con<code>cat</code>inate the contents of file(s) and display them. Command Syntax: <pre><code>cat [FILE(s)]\n# example\ncat file1.txt file2.txt\n</code></pre></li> <li>echo: The echo command is mainly used to display text in the stdout but can also be used to write in a file. Command syntax:  <pre><code>echo \"text to display in shell\"\necho \"text to display in file\" &gt; filename\n# Example\nsarthak@sarthak ~&gt; echo \"import hello\" &gt; main.py\nsarthak@sarthak ~&gt; cat main.py\nimport hello\n</code></pre></li> <li> <p>rm: The <code>rm</code> command is used to <code>r</code>e<code>m</code>ove files or dirs specified in the argument. Some useful flags for this command are:</p> <ul> <li><code>r</code>: recursively remove items from the directory</li> <li><code>f</code>: ignore files that do not exist without any prompts</li> </ul> <p>Command Syntax:  <pre><code>rm &lt;flags&gt; [TARGET] \n# Example\nrm hello.txt # will remove the hello.txt file \nrm -rf src/ \n# will remove all the files and dirs inside the src dir and delete it\n</code></pre></p> </li> <li> <p>cp: This command is used to create a <code>c</code>o<code>p</code>y of a file. Command syntax:  <pre><code>cp [SOURCE_FILE] [TARGET_FILE] # target file created if doesn't exist\n# Example\nsarthak@sarthak ~&gt; cat hello.py\nimport hello\nsarthak@sarthak ~&gt; cp hello.py test.py\nsarthak@sarthak ~&gt; cat test.py\nimport hello\n</code></pre></p> </li> <li>mv: The <code>m</code>o<code>v</code>e command is used to move the file from one location to another.  It can also be used to rename the file. <pre><code>mv [FILE] [TARGET] # target can be a directory or a file name\n# Example\nsarthak@sarthak ~&gt; mkdir test_dir\n# moving to a new directory\nsarthak@sarthak ~&gt; mv hello.py test_dir/\nsarthak@sarthak ~&gt; cat test_dir/hello.py\nimport hello\n# renaming the file\nsarthak@sarthak ~&gt; mv test_dir/hello.py test_dir/renamed_file.py\nsarthak@sarthak ~&gt; cat test_dir/renamed_file.py\nimport hello\n</code></pre></li> <li> <p>grep: The grep command is used to find for text in a file. Command syntax  <pre><code>grep &lt;tags&gt; [STR_TO_SEARCH_FOR] [FILENAME]\n# Example\nsarthak@sarthak ~ [1]&gt; grep \"py\" space/src/lib.rs\nuse pyo3::prelude::*;\n#[pyfunction]\n#[pymodule(name=\"space\")]\n    m.add_function(wrap_pyfunction!(test_function, m)?)?;\n# For better output use the --color and -n tags\n# it will highlight the output and add line numbers to the matches\n</code></pre> </p> </li> <li> <p>wget: This utility is used to download files to the local system. Command Syntax: <pre><code>wget &lt;-c&gt; [URL] # the c tag is used to establish a continous download\n# Example\nsarthak@sarthak ~&gt; wget -c https://bootstrap.pypa.io/get-pip.py\n--2024-08-24 08:01:29--  https://bootstrap.pypa.io/get-pip.py\nResolving bootstrap.pypa.io (bootstrap.pypa.io)... 151.101.156.175, 2a04:4e42:25::175\nConnecting to bootstrap.pypa.io (bootstrap.pypa.io)|151.101.156.175|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2266755 (2.2M) [text/x-python]\nSaving to: \u2018get-pip.py\u2019\n\nget-pip.py                    100%[=================================================&gt;]   2.16M  10.3MB/s    in 0.2s\n\n2024-08-24 08:01:30 (10.3 MB/s) - \u2018get-pip.py\u2019 saved [2266755/2266755]\n</code></pre></p> </li> </ul>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#text-editing","title":"Text Editing","text":"<p>Text editing tools like <code>nano</code> and <code>vim</code> come pre installed on most linux distributions. You can use <code>nano</code> for basic text editing inside the terminal.  Usage: <code>nano [FILENAME]</code> Alternatively you can use <code>mousepad</code> for GUI based editing. Usage: <code>mousepad [FILENAME]</code></p> <p></p>"},{"location":"2024/09/23/linux-how-tos--a-must-know-list-of-commands-in-linux-shells/#working-with-archives","title":"Working with Archives","text":"<p>The <code>tar</code> command is used to work with <code>tar.gz</code> format which is mostly used in linux OS(s). Usage: <code>tar [options] [archive-file]</code> You can use this command to unarchive files. <pre><code>tar -cvzf [archive].tar.gz [FOLDER NAME]\n</code></pre></p> <p>These are the commands I use for development using Ubuntu(WSL) and Arch(Bare Metal) as a daily driver. Fell free to comment for improvements and other relevant useful information that can be added \ud83d\ude04.</p>"},{"location":"2024/09/24/function-overloading-in-python/","title":"Function overloading in Python","text":"<p>Function overloading refers to the ability to define multiple functions with the same name but different signatures, meaning they have different numbers or types of parameters. The correct version of the function is chosen automatically by the compiler or interpreter, depending on the number and type of arguments passed during the function call.</p> <p>Languages like Java and C++ support this as a feature natively. While python does not support function overloading natively since it's a dynamically typed language, its possible to implement the same using various modules and utilities.</p> <p>This is my implementation of overloading.</p> <p>Warning</p> <p>This is just a basic idea and works for non-union fixed types.</p>"},{"location":"2024/09/24/function-overloading-in-python/#implementation","title":"Implementation","text":"<pre><code>from __future__ import annotations\n\nimport inspect\nimport typing\n\nbin: dict[str, OverloadNamespace] = {}\n\n\nclass OverloadNamespace:\n    overloads: dict[tuple[type, ...], typing.Callable[..., typing.Any]]\n    fallback: typing.Callable[..., typing.Any]\n\n    def __init__(self, name: str) -&gt; None:\n        self.overloads = {}\n        self.fallback = self._fallback\n        bin[name] = self\n\n    def __call__(self, *args: typing.Any, **kwds: typing.Any) -&gt; typing.Any:\n        types = [type(arg) for arg in args]\n        types.extend([type(kwrg) for kwrg in kwds])\n        try:\n            return self.overloads[tuple(types)](*args, **kwds)\n        except KeyError:\n            return self.fallback(*args, **kwds)\n\n    @staticmethod\n    def _fallback(*_, **__) -&gt; None:\n        raise NotImplementedError\n</code></pre> <p>The <code>OverloadNamespace</code> class is a callable that acts as a medium between the function name and the call signature. The arguments are passed into the <code>__call__</code> dunder method which matches the provided data types by comparing it to the type tuples stored in the <code>overloads</code> dictionary. The matched signature is returned and is called with the provided args/kwargs passed in the call. If no matching signature is found, the <code>fallback</code> function is called.</p>"},{"location":"2024/09/24/function-overloading-in-python/#using-the-overloadnamespace-class","title":"Using the OverloadNamespace class","text":"<p>This class is not meant to be used manually, it's utilised by decorators that modify the function and return an instance of the <code>OverloadNamespace</code> class using the same name as the function's provided name. </p>"},{"location":"2024/09/24/function-overloading-in-python/#overload","title":"Overload","text":"<pre><code>def overload(*args) -&gt; typing.Callable[..., OverloadNamespace] | OverloadNamespace:\n    \"\"\"Decorator used to create overloads of functions with same name. Returns a [OverloadNamespace]\"\"\"\n    if len(args) == 1 and inspect.isfunction(args[0]):\n        return overload_using_types(args[0])\n\n    def inner(func: typing.Callable[..., typing.Any]) -&gt; OverloadNamespace:\n        sig = inspect.signature(func)\n        assert len(args) == len(\n            sig.parameters\n        ), \"Number of types and args in function is not same.\"\n\n        namespace = (\n            bin[func.__name__]\n            if bin.get(func.__name__)\n            else OverloadNamespace(func.__name__)\n        )\n        namespace.overloads[tuple(args)] = func\n        return namespace\n\n    return inner\n\ndef overload_using_types(func: typing.Callable[..., typing.Any]) -&gt; OverloadNamespace:\n    args = inspect.signature(func).parameters\n    types = tuple(arg.annotation for arg in args.values())\n\n    namespace = (\n        bin[func.__name__]\n        if bin.get(func.__name__)\n        else OverloadNamespace(func.__name__)\n    )\n\n    namespace.overloads[types] = func\n    return namespace\n</code></pre> <p>The <code>overload</code> decorator checks the types of arguments using the decorator value or typehints and returns the namespace class.</p> <p>Example usage</p> <pre><code># types in decorator\n@overload(int, int)\ndef sum(a, b):\n    return a+b\n\n# or as typehints\n@overload \ndef sum(a: float, b: float):\n    return int(a+b)+1\n\nsum(1,2) # 3\nsum(1.23, 2.0) # 4\n</code></pre>"},{"location":"2024/09/24/function-overloading-in-python/#fallback","title":"Fallback","text":"<p>Fallback function are used as the function to be called when no argument patterns match the call pattern.</p> <pre><code>def fallback(\n    func: typing.Callable[..., typing.Any],\n) -&gt; OverloadNamespace:\n    \"\"\"Fallback function to be called if no overloads match to the provided arguments.\"\"\"\n    namespace = (\n        bin[func.__name__]\n        if bin.get(func.__name__)\n        else OverloadNamespace(func.__name__)\n    )\n    namespace.fallback = func\n    return namespace\n\n\n@fallback \ndef sum(*args):\n    return sum(args)\n\nsum(1,2,3,4) # 10\n</code></pre>"},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/linux/","title":"linux","text":""},{"location":"category/arch/","title":"arch","text":""},{"location":"category/python/","title":"python","text":""},{"location":"category/oop/","title":"oop","text":""},{"location":"category/shell/","title":"shell","text":""},{"location":"category/cli/","title":"cli","text":""}]}